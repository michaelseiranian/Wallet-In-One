# Generated by Django 4.1.5 on 2023-03-03 21:02

import django.contrib.auth.models
import django.core.validators
from django.db import migrations, models
import django.db.models.deletion
import django.utils.timezone


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='Location',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('address', models.CharField(blank=True, default=None, max_length=100, null=True)),
                ('city', models.CharField(blank=True, default=None, max_length=100, null=True)),
                ('region', models.CharField(blank=True, default=None, max_length=50, null=True)),
                ('postal_code', models.CharField(blank=True, default=None, max_length=100, null=True)),
                ('country', models.CharField(blank=True, default=None, max_length=50, null=True)),
                ('lat', models.FloatField(blank=True, default=None, null=True)),
                ('lon', models.FloatField(blank=True, default=None, null=True)),
                ('store_number', models.CharField(blank=True, default=None, max_length=100, null=True)),
            ],
        ),
        migrations.CreateModel(
            name='Transaction',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('account_id', models.CharField(max_length=100)),
                ('amount', models.FloatField()),
                ('iso_currency_code', models.CharField(max_length=30, null=True)),
                ('unofficial_currency_code', models.CharField(max_length=100, null=True)),
                ('category', models.JSONField()),
                ('category_id', models.CharField(max_length=50)),
                ('date', models.DateField()),
                ('datetime', models.DateTimeField(blank=True, null=True)),
                ('authorized_date', models.DateField(blank=True, null=True)),
                ('authorized_datetime', models.DateTimeField(blank=True, null=True)),
                ('name', models.CharField(max_length=50)),
                ('merchant_name', models.CharField(blank=True, max_length=50, null=True)),
                ('payment_channel', models.CharField(choices=[('online', 'Online'), ('in store', 'In Store'), ('other', 'Other')], max_length=20)),
                ('pending', models.BooleanField()),
                ('pending_transaction_id', models.CharField(blank=True, max_length=100, null=True)),
                ('account_owner', models.CharField(blank=True, max_length=50, null=True)),
                ('transaction_id', models.CharField(max_length=100, unique=True)),
                ('transaction_code', models.CharField(blank=True, choices=[('adjustment', 'Adjustment'), ('atm', 'ATM'), ('bank charge', 'Bank charge'), ('bill payment', 'Bill payment'), ('cash', 'Cash'), ('cashback', 'Cashback'), ('cheque', 'Cheque'), ('direct debit', 'Direct debit'), ('interest', 'Interest'), ('purchase', 'Purchase'), ('standing order', 'Standing order'), ('transfer', 'Transfer')], max_length=30, null=True)),
                ('transaction_type', models.CharField(choices=[('digital', 'Digital'), ('place', 'Special'), ('special', 'Special'), ('unresolved', 'Unresolved')], max_length=30)),
                ('location', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='accounts.location')),
            ],
        ),
        migrations.CreateModel(
            name='User',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('username', models.CharField(max_length=15, unique=True, validators=[django.core.validators.RegexValidator(message='Username must contain at least 4 alphabetical characters', regex='^(?=.*[a-zA-Z]{4,}).*$')])),
                ('first_name', models.CharField(max_length=15)),
                ('last_name', models.CharField(max_length=15)),
                ('email', models.EmailField(max_length=25, unique=True)),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.group', verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.permission', verbose_name='user permissions')),
            ],
            options={
                'verbose_name': 'user',
                'verbose_name_plural': 'users',
                'abstract': False,
            },
            managers=[
                ('objects', django.contrib.auth.models.UserManager()),
            ],
        ),
    ]
